/* REXX */                                                              00010001
/*                                                                      00020001
    Advent of Code 2023 - Puzzle #2                                     00030001
                                                                        00040001
    * Read input data records                                           00050001
    * **part 1**                                                        00060001
      Each record is one 'game', delimited by 'Game '<number>':'        00061004
      Each game consists of x "grabs" of y cubes from a bag             00062004
         with grab delimited by ';' characters                          00062104
      Each cube grab (chortle) is a count and color delimited by        00064004
         ',' characters                                                 00065004
      Evaluate each game to determine it is 'possible', with            00066004
         possible defined as limits on the max number of cubes of       00067004
         each color on any grab set to limits of:                       00068004
            12 red                                                      00069004
            13 green                                                    00069104
            14 blue                                                     00070004
         Any one cube grab (chortle) where any color exceeds the        00071004
            limit for that color causes the entire game to be           00072004
            considered 'impossible'                                     00073004
      Results:                                                          00074004
         Report find all "possible" games and report the sum of all     00075004
            their respective game numbers                               00076004
                                                                        00077004
    * **part 2**                                                        00080001
      For each game, find the MINIMUM number of cubes of each color     00081004
         that would have been present in the bag so that the            00090004
         entire game would have been possible (in other words,          00091004
         every grab would have had to have been 'possible')             00092004
      Once that minimum cube count for the game is determined,          00093004
         compute the 'power' of that game which is the product of       00094004
         the 3 minimum cube counts.                                     00095004
      Results:                                                          00096004
         Report the sum of all the game 'powers', possible or not.      00097004
                                                                        00098004
    Input:                                                              00100001
         Datasets:                                                      00110001
              INPUT2 (RequiRED)                                         00120003
                   Input data records                                   00130001
                                                                        00140001
         Parameters:                                                    00150001
              (none)                                                    00160001
                   Description                                          00170001
    Output:  Sum of all derived 2-digit values                          00180001
         Return code:                                                   00190001
              00: No potential problems found                           00200001
              04: Warnings                                              00210001
              08: Serious errors                                        00220001
              12: Etc                                                   00230001
         Datasets:                                                      00240001
              (none)                                                    00250001
                                                                        00260001
                                                                        00270001
    J.R. Garrett (c) Garrett Family Enterprises LLC                     00280001
                                                                        00290001
*/                                                                      00300001
                                                                        00310001
/* My 'standard' REXX boilerplate template code follows                 00320001
   Find "Meat" to locate the coding goodness */                         00330001
                                                                        00340001
/* Setup */                                                             00350001
parse SOURCE . . THIS_ .;                                               00360001
THIS_ = STRIP(THIS_,'Both');                                            00370001
MAXRC = 0;                                                              00380001
EXPOSE_ = 'PARMS.',                                                     00390001
    'PARMSO.',                                                          00400001
    ;                                                                   00410001
_ISPF = 'NO'; /* Are ISPF services requiRED? */                         00420003
_LOG = 'NO';  /* Allocate a message log file? */                        00430001
PARMS.0 = 0;  /* Parameter COUNT */                                     00440003
                                                                        00450001
ARG _UCARGS;     /* Input arguments in upper case */                    00460001
parse arg _ARGS; /* Input arguments "as is" */                          00470001
                                                                        00480001
/* Check for DEBUG(), process if present, and if so,                    00490001
   also remove from parameters */                                       00500001
if POS('DEBUG(',_UCARGS) > 0 then,                                      00510001
    do;                                                                 00520001
         /* Extract the value */                                        00530001
         parse value _UCARGS with,                                      00540001
              PREFIX 'DEBUG(' PARMS.DEBUG ')' SUFFIX;                   00550001
         /* Isolate any prefix and suffix */                            00560001
         PARMS.DEBUG = STRIP(PARMS.DEBUG,'Both');                       00570001
         if LEFT(PARMS.DEBUG,1) = 'Y' then,                             00580001
              if SYSVAR('SYSENV') = 'BACK' then,                        00590001
                   trace i;                                             00600001
              else,                                                     00610001
                   trace ?i;                                            00620001
         else,                                                          00630001
              PARMS.DEBUG = 'N';                                        00640001
                                                                        00650001
         /* Now strip from 'as is' parms */                             00660001
         _PREFIXLEN = LENGTH(PREFIX);                                   00670001
         _SUFFIXLEN = LENGTH(STRIP(SUFFIX,'Both'));                     00680001
         _SUFFIXPOS = POS(SUFFIX,_UCARGS);                              00690001
         if _PREFIXLEN > 0 then                                         00700001
              _PFX = LEFT(_ARGS,_PREFIXLEN);                            00710001
         else,                                                          00720001
              _PFX = '';                                                00730001
         if _SUFFIXLEN > 0 then                                         00740001
              _SFX = SUBSTR(_ARGS,_SUFFIXPOS);                          00750001
         else,                                                          00760001
              _SFX = '';                                                00770001
         /* Reconstruct parameter strings */                            00780001
         _ARGS = _PFX _SFX;                                             00790001
         _UCARGS = TRANSLATE(_ARGS);                                    00800001
    end;                                                                00810001
                                                                        00820001
/* If ISPF is requiRED, make it so */                                   00830003
if _ISPF = 'YES' then,                                                  00840001
    do;                                                                 00850001
         if SYSVAR('SYSISPF') <> 'ACTIVE' then,                         00860001
             do;                                                        00870001
                  "ISPSTART CMD(%"THIS_" "INPARMS")",                   00880001
                       "BDISPMAX(999999)",                              00890001
                       ;                                                00900001
                  return RC;                                            00910001
             end;                                                       00920001
                                                                        00930001
         address ISPEXEC "CONTROL ERRORS RETURN";                       00940001
    end;                                                                00950001
                                                                        00960001
/* Parameter extraction */                                              00970001
_WORK = _UCARGS;                                                        00980001
do ZIX = 1 WHILE POS('(',_WORK) > 0;                                    00990001
    parse value STRIP(_WORK,'Both'),                                    01000001
         with _PARM '(' _VALUE ')' _WORK;                               01010001
    PARMS.ZIX = _PARM;                                                  01020001
    PARMS._PARM = _VALUE;                                               01030001
    PARMS.0 = ZIX;                                                      01040001
    /* Also store value in original case */                             01050001
    _OFFSET = POS(_PARM'(',_UCARGS) + LENGTH(_PARM'(');                 01060001
    PARMSO._PARM = SUBSTR(_ARGS,_OFFSET,LENGTH(PARMS._PARM));           01070001
end ZIX;                                                                01080001
                                                                        01090001
/* Set up message logging, if requiRED or requested */                  01100003
if _LOG = 'YES',                                                        01110001
  |,                                                                    01120001
   LEFT(PARMS.LOG,1) = 'Y' then,                                        01130001
    do;                                                                 01140001
        if LISTDSI('$SAYLOG$ FILE') > 4 then,                           01150001
             if SYSREASON <> 3 then,                                    01160001
                  do;                                                   01170001
                       "ALLOC FI($SAYLOG$)",                            01180001
                            "UNIT(3390)",                               01190001
                            "SPACE(5 5)",                               01200001
                            "CYLINDERS",                                01210001
                            "RELEASE",                                  01220001
                            "NEW",                                      01230001
                            "CATALOG",                                  01240001
                            "BLKSIZE(0)",                               01250001
                            "LRECL(2044)",                              01260001
                            "RECFM(V B)"                                01270001
                       _LOGCLOSE = 'Y';                                 01280001
                  end;                                                  01290001
    end;                                                                01300001
/* end logging */                                                       01310001
                                                                        01320001
/* Set return logic appropriate to our environment */                   01330001
_END_EXEC = 'return MAXRC;';                                            01340001
if _LOGCLOSE = 'Y' then,                                                01350001
    _END_EXEC = '"EXECIO 0 DISKW $SAYLOG$ (FINIS";',                    01360001
         '"FREE FI($SAYLOG$)";',                                        01370001
         _END_EXEC;                                                     01380001
/* If running under ISPF, then exposing the return code to              01390001
   the 'outside world' requires saving it as the shaRED pool            01400003
   variable: ZISPFRC */                                                 01410001
if SYSVAR('SYSISPF') = 'ACTIVE' then,                                   01420001
    _END_EXEC = 'ZISPFRC = MAXRC;',                                     01430001
         'address ISPEXEC "VPUT (ZISPFRC) SHARED";',                    01440003
         _END_EXEC;                                                     01450001
                                                                        01460001
/* Environment Validation */                                            01470001
/* Sample:                                                              01480001
if SYMBOL('PARMS.PARM') <> 'VAR' then,                                  01490001
    do;                                                                 01500001
         call SAYLOG TIME(),                                            01510001
              THIS_,                                                    01520001
              '*ERROR* REQUIRED PARAMETER',                             01530003
              'PARM()',                                                 01540001
              'NOT PROVIDED - ABORTING';                                01550001
         MAXRC = MAX(MAXRC,8);                                          01560001
    end;                                                                01570001
else,                                                                   01580001
    do;                                                                 01590001
         if /* check for specific values, format. etc.                  01600001
               if requiRED */ then,                                     01610003
              do;                                                       01620001
                   call SAYLOG TIME(),                                  01630001
                        THIS_,                                          01640001
                        '*ERROR* PARAMETER VALUE',                      01650001
                        'PARM('PARMS.PARM')',                           01660001
                        'IS INVALID - ABORTING';                        01670001
                   MAXRC = MAX(MAXRC,8);                                01680001
              end;                                                      01690001
    end;                                                                01700001
*/                                                                      01710001
if LISTDSI('INPUT2 FILE') > 4 then,                                     01720002
    if SYSREASON <> 3 then,                                             01730001
         do;                                                            01740001
              call SAYLOG DATE(),                                       01750001
                   TIME(),                                              01760001
                   THIS_,                                               01770001
                   '*ERROR*: REQUIRE FILE INPUT2 NOT ALLOCATED',        01780002
                   ;                                                    01790001
              MAXRC = MAX(MAXRC,8);                                     01800001
         end;                                                           01810001
                                                                        01820001
/* If errors were found, abort - but only after having                  01830001
   presented the user with *all* the problems.                          01840001
   (I --hate-- code that beats the user to death, one                   01850001
    error at a time, aborting after it finds the first                  01860001
    issue) */                                                           01870001
if MAXRC > 4 then,                                                      01880001
    do;                                                                 01890001
         call SAYLOG DATE(),                                            01900001
              TIME(),                                                   01910001
              THIS_,                                                    01920001
              'ABORTING DUE TO ABOVE ERRORS';                           01930001
         interpret _END_EXEC;                                           01940001
    end;                                                                01950001
                                                                        01960001
/* Meat begins here */                                                  01970001
                                                                        01980001
/* Set up some useful 'stuff' */                                        01990001
_MAX.RED = 12;                                                          02000003
_MAX.GREEN = 13;                                                        02010003
_MAX.BLUE = 14;                                                         02020003
_COUNT.POSSIBLE = 0;                                                    02030003
_COUNT.IMPOSSIBLE = 0;                                                  02040003
_SCORE = 0;                                                             02050003
_POWER = 0;                                                             02051003
                                                                        02060001
/* Time to get to work */                                               02070001
do READLOOP = 1;                                                        02080001
    "EXECIO 1 DISKR INPUT2";                                            02090002
    if RC <> 0 then,                                                    02100001
         do;                                                            02110001
              "EXECIO 0 DISKR INPUT2 (FINIS";                           02120002
              leave READLOOP;                                           02130001
         end;                                                           02140001
    parse upper pull BUFFER;                                            02150003
    _TEXT = STRIP(BUFFER,'Both');                                       02160003
                                                                        02170001
    /* realwork is here */                                              02180001
    parse value _TEXT with,                                             02190003
         _IDPART ':',                                                   02200003
         _GRABPART;                                                     02210003
    parse value _IDPART with,                                           02220003
         'GAME' _GNUM;                                                  02230003
    /*                                                                  02231003
    say 'GAME' _GNUM;                                                   02240003
       */                                                               02241003
    /* Assume ... */                                                    02250003
    GAME._GNUM = 'POSSIBLE';                                            02260003
    GAME._GNUM.RED = 0;                                                 02261003
    GAME._GNUM.GREEN = 0;                                               02262003
    GAME._GNUM.BLUE = 0;                                                02263003
    do GRABLOOP = 1 until LENGTH(_GRABPART) = 0;                        02270003
         parse value STRIP(_GRABPART,'Both') with,                      02280003
              _GRAB ';' _GRABPART;                                      02290003
                                                                        02300003
         TOT.RED = 0;                                                   02310003
         TOT.GREEN = 0;                                                 02320003
         TOT.BLUE = 0;                                                  02330003
                                                                        02340003
         do CUBELOOP = 1 until LENGTH(_GRAB) = 0;                       02350003
              parse value STRIP(_GRAB,'Both') with,                     02360003
                   _COUNT COLOR ',' _GRAB;                              02370003
              _COUNT = _COUNT;                                          02380003
              TOT.COLOR = TOT.COLOR + _COUNT;                           02390003
              GAME._GNUM.COLOR = MAX(GAME._GNUM.COLOR,,                 02391003
                                     TOT.COLOR);                        02392003
         end CUBELOOP;                                                  02400003
                                                                        02410003
         /* How'd we do on this grab? */                                02420003
         if TOT.RED > _MAX.RED,                                         02430003
           |,                                                           02440003
            TOT.GREEN > _MAX.GREEN,                                     02450003
           |,                                                           02460003
            TOT.BLUE > _MAX.BLUE then,                                  02470003
              do;                                                       02480003
                   GAME._GNUM = '*IMPOSSIBLE*';                         02490003
                   /*                                                   02491003
                   call SAYLOG DATE(),                                  02500003
                        TIME(),                                         02510003
                        THIS_,                                          02520003
                        'GAME:',                                        02530003
                        GAME._GNUM,                                     02540003
                        'IMPOSSIBLE WITH',                              02550003
                        'RED:'TOT.RED,                                  02560003
                        'GREEN:'TOT.GREEN,                              02570003
                        'BLUE:'TOT.BLUE;                                02580003
                      */                                                02581003
              end;                                                      02610003
    end GRABLOOP;                                                       02620003
    GAME._GNUM.POWER = GAME._GNUM.RED *,                                02621003
                       GAME._GNUM.GREEN *,                              02622003
                       GAME._GNUM.BLUE;                                 02623003
    _POWER = _POWER + GAME._GNUM.POWER;                                 02624003
                                                                        02625003
    if GAME._GNUM = 'POSSIBLE' then,                                    02630003
         do;                                                            02640003
              call SAYLOG DATE(),                                       02650003
                   TIME(),                                              02660003
                   THIS_,                                               02670003
                   'GAME:',                                             02680003
                   _GNUM,                                               02690003
                   'IS POSSIBLE',                                       02700003
                   ;                                                    02710003
              _COUNT.POSSIBLE = _COUNT.POSSIBLE + 1;                    02720003
              _SCORE = _SCORE + _GNUM;                                  02730003
                                                                        02740003
         end;                                                           02750003
    else,                                                               02751003
              _COUNT.IMPOSSIBLE = _COUNT.IMPOSSIBLE + 1;                02752003
end READLOOP;                                                           02760001
                                                                        02761003
/* Part 2 */                                                            02762003
do ZIX = 1 to READLOOP;                                                 02763003
end ZIX;                                                                02764003
                                                                        02770001
/* Display results */                                                   02780001
call SAYLOG DATE(),                                                     02790001
    TIME(),                                                             02800001
    THIS_,                                                              02810001
    'RESULTS:';                                                         02820001
call SAYLOG DATE(),                                                     02830001
    TIME(),                                                             02840001
    THIS_,                                                              02850001
    COPIES(' ',LENGTH('RESULTS:')),                                     02860001
    'IMPOSSIBLE GAMES:',                                                02870003
    _COUNT.IMPOSSIBLE;                                                  02880003
call SAYLOG DATE(),                                                     02890003
    TIME(),                                                             02900003
    THIS_,                                                              02910003
    COPIES(' ',LENGTH('RESULTS:')),                                     02920003
    'POSSIBLE GAMES:',                                                  02930003
    _COUNT.POSSIBLE;                                                    02940003
call SAYLOG DATE(),                                                     02950003
    TIME(),                                                             02960003
    THIS_,                                                              02970003
    COPIES(' ',LENGTH('RESULTS:')),                                     02980003
    'SCORE:',                                                           02990003
    _SCORE;                                                             03000003
call SAYLOG DATE(),                                                     03001003
    TIME(),                                                             03002003
    THIS_,                                                              03003003
    COPIES(' ',LENGTH('RESULTS:')),                                     03004003
    'POWER:',                                                           03005003
    _POWER;                                                             03006003
                                                                        03010003
interpret _END_EXEC;                                                    03020003
                                                                        03030003
SAYLOG:                                                                 03040003
    procedure expose (EXPOSE_);                                         03050003
                                                                        03060003
    /*                                                                  03070003
         Function to "fork" a message both to the terminal user and to  03080003
         a log dataset, if one has been provided.                       03090001
                                                                        03100001
         Input:                                                         03110001
              Parameters:                                               03120001
                   raw text of message                                  03130001
                                                                        03140001
              Datasets:                                                 03150001
                   $SAYLOG$         : (Optional)                        03160001
                                      If provided, must be allocated to 03170001
                                      a dataset that can be written to. 03180001
                                                                        03190001
         Output:                                                        03200001
              Function result:                                          03210001
                   Numeric return code                                  03220001
                                                                        03230001
     */                                                                 03240001
                                                                        03250001
     parse SOURCE . . THIS_ .;                                          03260001
     THIS_ = STRIP(THIS_,'Both')'_SAYLOG';                              03270001
     MAXRC = 0;                                                         03280001
                                                                        03290001
     /* Process incoming parameters */                                  03300001
     parse arg _MSG_TEXT;                                               03310001
                                                                        03320001
     /* Very simple code... */                                          03330001
     say _MSG_TEXT;                                                     03340001
                                                                        03350001
     /* Were we provided an output file? */                             03360001
     if LISTDSI('$SAYLOG$ FILE') > 4 then,                              03370001
         if SYSREASON <> 3 then,                                        03380001
              return MAXRC; /* Nope, we're done */                      03390001
                                                                        03400001
     /* Looks like we have one */                                       03410001
     queue DATE('Standard'),                                            03420001
           TIME(),                                                      03430001
           SYSVAR('SYSUID'),                                            03440001
           _MSG_TEXT;                                                   03450001
     "EXECIO 1 DISKW $SAYLOG$";                                         03460001
     MAXRC = MAX(MAXRC,RC);                                             03470001
                                                                        03480001
     return MAXRC;                                                      03490001
                                                                        03500001
